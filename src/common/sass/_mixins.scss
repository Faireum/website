// sass-lint:disable-all

//  Media
@mixin bp($querystring) {
  $valid: true;
  @if type-of($querystring) != "string" {
    @warn 'querystring: #{$querystring} is not a string';
    $valid: false;
  }
  @if $valid == true {
    @media #{$querystring} {
      @content;
    }
  }
}

//  String Replace
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }
  @return $string;
}

//  Font Face
@mixin font-face(
  $name,
  $path,
  $weight: null,
  $style: null,
  $exts: eot woff2 woff ttf svg
) {
  $src: null;
  $extmods: (
    eot: "?",
    svg: "#" + str-replace($name, " ", "_")
  );
  $formats: (
    otf: "opentype",
    ttf: "truetype"
  );
  @each $ext in $exts {
    $extmod: if(
      map-has-key($extmods, $ext),
      $ext + map-get($extmods, $ext),
      $ext
    );
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append(
      $src,
      url(quote($path + "." + $extmod)) format(quote($format)),
      comma
    );
  }
  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}

//  RetinaBG
@mixin background-2x(
  $path,
  $ext: "png",
  $size: cover,
  $pos: left top,
  $repeat: no-repeat
) {
  $at1x-path: "#{$path}.#{$ext}";
  $at2x-path: "#{$path}@2x.#{$ext}";
  background: url("#{$at1x-path}") $repeat $pos;
  background-size: $size;
  @media all and (-webkit-min-device-pixel-ratio: 1.5),
    all and (-o-min-device-pixel-ratio: 3 / 2),
    all and (min--moz-device-pixel-ratio: 1.5),
    all and (min-device-pixel-ratio: 1.5) {
    background-image: url("#{$at2x-path}");
  }
}

//  Container
@mixin container {
  @include bp($desktop) {
    max-width: $desktop-container;
  }
  @include bp($tablet) {
    max-width: $tablet-container;
  }
  @include bp("(min-width: 570px) and (max-width: 768px)") {
    max-width: $ipad-container;
  }
  @include bp ($mobile) {
    padding: $container-padding-mob;
  }
  width: 100%;
  max-width: $container;
  margin: 0 auto;
  padding: $container-padding;
}

// Letter Spacing
@mixin tracking($ps-tracking) {
  letter-spacing: #{$ps-tracking / 1000}em;
}

//  Gradient Animation
@mixin gradient-animation($start, $end) {
  background-size: 100%;
  background-image: linear-gradient(to right, $start, $end);
  position: relative;
  z-index: 100;
  &::before {
    background-image: linear-gradient(to left, $end, $start);
    content: "";
    display: block;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    opacity: 0;
    width: 100%;
    z-index: -100;
    transition: opacity 0.3s ease;
  }
  &:hover {
    &::before {
      opacity: 1;
    }
  }
}

//  At Root
@mixin optional-at-root($sel) {
  @at-root #{if(not &, $sel, selector-append(&, $sel))} {
    @content;
  }
}

//  Placeholder
@mixin placeholder {
  @include optional-at-root("::-webkit-input-placeholder") {
    @content;
  }

  @include optional-at-root(":-moz-placeholder") {
    @content;
  }

  @include optional-at-root("::-moz-placeholder") {
    @content;
  }

  @include optional-at-root(":-ms-input-placeholder") {
    @content;
  }
}

// Transition
@function tn($rules...) {
  $base: .3s ease-out;
  $transition: ();
  @each $rule in $rules {
    $transition: append($transition, join($rule, $base), 'comma');
  }
  @return $transition;
}

// Hidden
@mixin hidden {
  opacity: 0;
  visibility: hidden;
  pointer-events: none;
}

// Visible
@mixin visible {
  opacity: 1;
  visibility: visible;
  pointer-events: all;
}

// Background image
@mixin bgimage {
  background: no-repeat center;
  background-size: cover;
}



